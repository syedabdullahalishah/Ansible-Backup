# {{ ansible_managed }}
# Default DTAP VCL
backend default {
    .host = "127.0.0.1";
    .port = "8081";
    .first_byte_timeout = 18000s;
    .between_bytes_timeout = 18000s;
}

# Purge/Bans ACL
acl purge {
        "localhost";
        "127.0.0.1";
}

sub vcl_hit {
        if (req.request == "PURGE") {
                purge;
                error 200 "Purged.";
        }
}

sub vcl_miss {
        if (req.request == "PURGE") {
                purge;
                error 200 "Purged.";
        }
}

#Recieve
sub vcl_recv {

#Enable X-Forwarding
if (req.restarts == 0) {
    if (!req.http.x-forwarded-for) {
        set req.http.X-Forwarded-For = client.ip;
    }
}
if (req.http.X-Forwarded-Proto ~ "(?i)https") {
        return(pass);
 }
#Purging
if (req.request == "PURGE") {
                if (!client.ip ~ purge) {
                        error 405 "Not allowed.";
                }
                return (lookup);
        }
#Baning
if (req.request == "BAN") {
                if (!client.ip ~ purge) {
                        error 405 "Not allowed.";
                }
                ban("req.http.host == " + req.http.host +
                      "&& req.url == " + req.url);

                error 200 "Ban added";
        }

#Removing Cookies from static objects
 if (req.url ~ "\.(png|gif|jpg|ico|jpeg|swf|pdf|js|css)$") {
    unset req.http.cookie;
  }


#Do not compress objects that are already compressed
if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(gif|jpg|jpeg|swf|flv|mp3|mp4|pdf|png|gz|tgz|tbz|bz2)(\?.*|)$") {
      remove req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      remove req.http.Accept-Encoding;
    }
}

}

## Fetch
sub vcl_fetch {
        if(beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504 || beresp.status == 404){
        return(hit_for_pass);
        }

        if (req.url ~ "\.(png|gif|jpg|ico|jpeg|swf|js|css|pdf)$") {
        ##Remove Expires from backend, it's not long enough */
        unset beresp.http.expires;
        ##Set the clients TTL on this object */
        set beresp.http.cache-control = "max-age=1209600";
        ##Set how long Varnish will keep it */
        set beresp.ttl = 30d;
        ##marker for vcl_deliver to reset Age: */
        set beresp.http.magicmarker = "1";
        #Setexpires headers
        set beresp.http.expires="1209600";
        }
}

## Deliver
sub vcl_deliver {
        ##hiding some headers added by Varnish.
        remove resp.http.X-Varnish;
        ##Hiding people to see we are using Varnish.
        remove resp.http.Via;
        ## Hiding the X-Powered-By headers and PHP version info in headers.
        remove resp.http.X-Powered-By;

        #Set Expire time
        set resp.http.Age = "1209600";
        set resp.http.X-Cache-Expires = resp.http.Expires;
        ##Check if object is served from Cache or Not

        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT";
        } else {
                set resp.http.X-Cache = "MISS";
        }

        if (resp.http.magicmarker) {
        ##/* Remove the magic marker */
                unset resp.http.magicmarker;
        ##By definition we have a fresh object */
                set resp.http.age = "0";
        }
}